{"version":3,"sources":["Miner.tsx","OpenTransaction.tsx","model/transaction-model.ts","TransactionForm.tsx","Block.tsx","Blockchain.tsx","model/block-model.ts","model/blockchain-model.ts","model/miner-model.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Miner","props","useState","message","setMessage","proofOfWork","setProofOfWork","mining","setMining","useEffect","subscription","miner","observeProofOfWorkSearch","subscribe","current","unsubscribe","className","onClick","startMining","pauseMining","OpenTransaction","transaction","amount","from","to","TransactionModel","_from","_to","_amount","this","TransactionForm","setFrom","setTo","setAmount","blockchain","openTransactions","setOpenTransactions","observeNewBlock","transactions","map","index","key","data-testid","type","value","onChange","event","parseInt","target","newTransaction","addOpenTransaction","t","length","Block","block","s","previousHash","hash","Blockchain","mapBlocks","b","reverse","blocks","setBlocks","BlockModel","_transactions","_previousHash","_proofOfWork","_hash","transactionsAsString","join","createHash","update","digest","BlockchainModel","_blockSubject","_blocks","_openTransactions","genesis","push","BehaviorSubject","asObservable","console","debug","newBlock","splice","MAX_BLOCK_SIZE","top","blockchainConsistent","pipe","EveryReduceOperator","b1","b2","checkBlocks","next","pop","block1","block2","startsWith","PROOF_OF_WORK_CONSTRAINT","reducer","_lastBlock","undefined","reducerResult","operatorResult","done","TerminalOperator","MinerModel","_blockchain","_proofOfWorkSubject","Subject","_miningSubscription","_blockSubscription","_top","interval","MINING_TIMEOUT","delayWhen","timer","mine","addBlock","App","tearDown","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7d12497.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MinerModel from './model/miner-model';\nimport { Subscription } from 'rxjs';\nimport './Miner.css';\n\ninterface MinerProps {\n    miner: MinerModel;\n}\n\nconst Miner: React.FC<MinerProps> = (props: MinerProps) => {\n    const [message, setMessage] = useState('I am waiting!');\n    const [proofOfWork, setProofOfWork] = useState('');\n    const [mining, setMining] = useState(false);\n    useEffect(() => {\n        const subscription: Subscription = props.miner.observeProofOfWorkSearch().subscribe((current: string) => setProofOfWork(current));\n        return () => subscription.unsubscribe();\n    });\n\n    const startMining = () => {\n        setMining(true);\n        setMessage('I am mining!');\n        props.miner.startMining();\n    };\n\n    const pauseMining = () => {\n        setMining(false);\n        setMessage('I am waiting!');\n        props.miner.pauseMining();\n    };\n\n    return (\n        <div className=\"miner\">\n            <h2 className=\"title\">Miner</h2>\n            <div>\n                {message} {proofOfWork}\n            </div>\n            <div>\n                <button className={\"button is-link \" + (mining ? 'is-loading' : '')} onClick={startMining}>Start</button>\n                <button className=\"button is-link\" onClick={pauseMining}>Pause</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Miner;\n","import React from 'react';\nimport TransactionModel from './model/transaction-model';\n\ninterface TransactionProps {\n    transaction: TransactionModel;\n}\n\nconst OpenTransaction: React.FC<TransactionProps> = (props: TransactionProps) => {\n    return(\n        <div>\n            Transfer {props.transaction.amount} from {props.transaction.from} to {props.transaction.to}.\n        </div>\n    );\n}\n\nexport default OpenTransaction;\n","export default class TransactionModel {\n\n    public get from(): string {\n        return this._from;\n    }\n\n    public get to(): string {\n        return this._to;\n    }\n\n    public get amount(): number {\n        return this._amount;\n    }\n\n    constructor(private _from: string,\n                private _to: string,\n                private _amount: number) {}\n\n}\n","import React, { useState, ChangeEvent, useEffect } from 'react';\nimport OpenTransaction from './OpenTransaction';\nimport BlockchainModel from './model/blockchain-model';\nimport TransactionModel from './model/transaction-model';\nimport { Subscription } from 'rxjs';\n\nimport './TransactionForm.css'\n\ninterface TransactionFormProps {\n    blockchain: BlockchainModel\n}\n\nconst TransactionForm: React.FC<TransactionFormProps> = (props: TransactionFormProps) => {\n    const [from, setFrom] = useState('');\n    const [to, setTo] = useState('');\n    const [amount, setAmount] = useState(1);\n    const [openTransactions, setOpenTransactions] = useState([...props.blockchain.openTransactions]);\n\n    const onAmountChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const value: number = parseInt(event.target.value);\n        if (value) {\n            setAmount(value);\n        } else {\n            setAmount(1);\n        }\n    }\n\n    const addTransaction = () => {\n        const newTransaction = new TransactionModel(from, to, amount);\n        props.blockchain.addOpenTransaction(newTransaction);\n        setOpenTransactions(t => [...t, newTransaction]);\n    };\n\n    useEffect(() => {\n        const subscription: Subscription = props.blockchain.observeNewBlock().subscribe(() => setOpenTransactions([...props.blockchain.openTransactions]));\n        return () => subscription.unsubscribe();\n    }, [props.blockchain]);\n\n    const transactions = openTransactions\n        .map((transaction: TransactionModel, index: number) => <OpenTransaction key={index} transaction={transaction} />);\n\n    return (\n        <div>\n            <div>\n                <h2 className=\"title\">Transactions</h2>\n                <div className=\"transaction-form\">\n                    Transfer <input data-testid=\"amount\" className=\"input\" type=\"text\" value={amount} onChange={onAmountChange} /> \n                    from <input data-testid=\"from\" className=\"input\" type=\"text\" value={from} onChange={event => setFrom(event.target.value)} /> \n                    to <input data-testid=\"to\" className=\"input\" type=\"text\" value={to} onChange={event => setTo(event.target.value)} />\n                    <button data-testid=\"add\" className=\"button is-link\" onClick={addTransaction}>Add</button>\n                </div>\n            </div>\n            <div>\n                Currently there are {transactions.length} open transactions.\n            </div>\n            <div>\n                {transactions}\n            </div>\n        </div>\n    );\n};\n\nexport default TransactionForm","import React from 'react';\nimport './Block.css';\nimport BlockModel from './model/block-model';\nimport TransactionModel from './model/transaction-model';\n\n\ninterface BlockProps {\n    block: BlockModel;\n}\n\nconst Block: React.FC<BlockProps> = (props: BlockProps) => {\n    const transactions = props.block.transactions\n        .map((transaction: TransactionModel) => `Transfered ${transaction.amount} from ${transaction.from} to ${transaction.to}`)\n        .map((s: string) => <li>{s}</li>);\n    return (\n        <div className=\"block box\">\n            { transactions.length > 0 && <div><b>Transactions:</b> <ul>{transactions}</ul></div> }\n            { props.block.previousHash.length > 0 && <div><b>Previous hash:</b> {props.block.previousHash}</div> }\n            <b>Hash:</b> {props.block.hash}<br />\n            <b>Proof of work:</b> {props.block.proofOfWork}\n        </div>\n    );\n};\n\nexport default Block;","import React, { useEffect, useState } from 'react';\nimport Block from './Block';\nimport BlockchainModel from './model/blockchain-model';\nimport BlockModel from './model/block-model';\nimport { Subscription } from 'rxjs';\nimport './Blockchain.css';\n\ninterface BlockchainProps {\n    blockchain: BlockchainModel;\n}\n\nconst Blockchain: React.FC<BlockchainProps> = (props: BlockchainProps) => {\n\n    const mapBlocks = (b: Array<BlockModel>) => b.map((block: BlockModel, index: number) => <Block key={index} block={block} />).reverse();\n\n    const [blocks, setBlocks] = useState(mapBlocks(props.blockchain.blocks));\n\n    useEffect(() => {\n        const subscription: Subscription = props.blockchain.observeNewBlock().subscribe(() => setBlocks(mapBlocks(props.blockchain.blocks)));\n        return () => subscription.unsubscribe();\n    }, [props.blockchain]);\n\n    \n    return (\n        <div className=\"blockchain\">\n            <h2 className=\"title\">Blockchain</h2>\n            {blocks}\n        </div>\n    );\n};\n\nexport default Blockchain;\n","import TransactionModel from \"./transaction-model\";\nimport { createHash } from \"crypto\";\n\nexport default class BlockModel {\n\n    private _hash: string;\n\n    constructor(private _transactions: Array<TransactionModel>,\n                private _previousHash: string,\n                private _proofOfWork: number) {\n\n        const transactionsAsString: string = _transactions\n            .map((transaction: TransactionModel) => `${transaction.from}${transaction.to}${transaction.amount}`)\n            .join();\n\n        this._hash = createHash('sha256')\n            .update(transactionsAsString)\n            .update(`${_previousHash}`)\n            .update(`${_proofOfWork}`)\n            .digest('hex');\n    }\n\n\n    \n    public get transactions(): Array<TransactionModel> {\n        return this._transactions;\n    }\n\n    public get previousHash(): string {\n        return this._previousHash;\n    }\n\n    public get hash(): string {\n        return this._hash;\n    }\n\n    public get proofOfWork(): number {\n        return this._proofOfWork;\n    }\n}\n","import { Subject, BehaviorSubject, Observable } from 'rxjs';\nimport '@gossie/array-pipe';\nimport BlockModel from './block-model';\nimport TransactionModel from './transaction-model';\nimport { Operator, TerminalOperator, OperatorResult } from '@gossie/array-pipe/operators';\nimport { createHash } from 'crypto';\n\nexport default class BlockchainModel {\n\n    public static readonly PROOF_OF_WORK_CONSTRAINT = '00';\n    private static readonly MAX_BLOCK_SIZE = 5;\n\n    private _blockSubject: Subject<BlockModel>;\n    private _blocks: Array<BlockModel> = [];\n    private _openTransactions: Array<TransactionModel> = [];\n\n    constructor() {\n        const genesis = new BlockModel([], '', 123);\n        this._blocks.push(genesis);\n        this._blockSubject = new BehaviorSubject(genesis);\n    }\n\n    public observeNewBlock(): Observable<BlockModel> {\n        return this._blockSubject.asObservable();\n    }\n\n    public get top(): BlockModel {\n        return this._blocks[this._blocks.length - 1];\n    }\n\n    public get blocks(): Array<BlockModel> {\n        return this._blocks;\n    }\n\n    public get openTransactions(): Array<TransactionModel> {\n        return this._openTransactions;\n    }\n\n    public addOpenTransaction(transaction: TransactionModel): void {\n        this._openTransactions.push(transaction);\n    }\n\n    public addBlock(proofOfWork: number): void {\n        console.debug('blockchain received a new proof of work', proofOfWork);\n        const newBlock = new BlockModel(this._openTransactions.splice(0, BlockchainModel.MAX_BLOCK_SIZE), this.top.hash, proofOfWork);\n        console.debug('blockchain created a new block', newBlock);\n        this._blocks.push(newBlock);\n\n        const blockchainConsistent: boolean = this._blocks.pipe(\n            everyReduce((b1: BlockModel, b2: BlockModel) => this.checkBlocks(b1, b2))\n        )\n        console.debug('blockchain was checked for consistency', blockchainConsistent);\n\n        if (blockchainConsistent) {\n            console.debug('blockchain propagates block');\n            this._blockSubject.next(newBlock);\n        } else {\n            console.debug('blockchain removes block');\n            this._blocks.pop();\n        }\n    }\n\n    private checkBlocks(block1: BlockModel, block2: BlockModel): boolean {\n        return createHash('sha256')\n            .update(`${block1.proofOfWork}${block2.proofOfWork}${block1.hash}`)\n            .digest('hex')\n            .startsWith(BlockchainModel.PROOF_OF_WORK_CONSTRAINT);\n    }\n}\n\ninterface BiFunction<A, B, C> {\n    (a: A, b: B): C;\n};\n\nclass EveryReduceOperator extends TerminalOperator<BlockModel, boolean> {\n\n    private _lastBlock: BlockModel | undefined = undefined;\n\n    constructor(private reducer: BiFunction<BlockModel, BlockModel, boolean>) {\n        super();\n    }\n\n    public getFallbackValue(): boolean {\n        return true;\n    }\n\n    public perform(from: BlockModel): OperatorResult<boolean> {\n        if (this._lastBlock) {\n            const reducerResult: boolean = this.reducer(this._lastBlock, from);\n            const operatorResult: OperatorResult<boolean> =  {\n                value: reducerResult,\n                done: !reducerResult\n            };\n            this._lastBlock = from;\n            return operatorResult;\n        } else {\n            this._lastBlock = from;\n            return {\n                value: false,\n                done: false\n            };\n        }\n    }\n\n}\n\nfunction everyReduce(reducer: BiFunction<BlockModel, BlockModel, boolean>): Operator<BlockModel, boolean> {\n    return new EveryReduceOperator(reducer);\n}\n","import BlockchainModel from \"./blockchain-model\";\nimport { createHash } from \"crypto\";\nimport BlockModel from './block-model';\nimport { Subscription, interval, timer, Subject, Observable } from \"rxjs\";\nimport { delayWhen } from 'rxjs/operators';\n\nexport default class MinerModel {\n\n    private static readonly MINING_TIMEOUT = 50;\n\n    private _proofOfWorkSubject: Subject<string> = new Subject();\n    private _miningSubscription: Subscription | undefined = undefined;\n    private _blockSubscription: Subscription;\n    private _top: BlockModel;\n    private _proofOfWork = 0;\n\n    constructor(private  _blockchain: BlockchainModel) {\n        this._top = _blockchain.top;\n        this._blockSubscription = _blockchain.observeNewBlock()\n            .subscribe((block: BlockModel) => {\n                this._top = block;\n                this._proofOfWork = 0;\n            });\n    }\n\n    public observeProofOfWorkSearch(): Observable<string> {\n        return this._proofOfWorkSubject.asObservable();\n    }\n\n    public startMining(): void {\n        this._miningSubscription = interval(MinerModel.MINING_TIMEOUT)\n            .pipe(\n                delayWhen(() => {\n                    if (this._proofOfWork === 0) {\n                        return timer(3000);\n                    } else {\n                        return timer(0);\n                    }\n                })\n            )\n            .subscribe(() => this.mine());\n    }\n\n    public pauseMining(): void {\n        this._miningSubscription?.unsubscribe();\n    }\n\n    public tearDown(): void {\n        if (this._miningSubscription) {\n            this._miningSubscription.unsubscribe();\n        }\n        this._blockSubscription.unsubscribe();\n    }\n\n    private mine(): void {\n        this._proofOfWorkSubject.next(`Currently checking ${this._proofOfWork}`);\n\n        const aHash: string = createHash('sha256')\n            .update(`${this._top.proofOfWork}${this._proofOfWork}${this._top.hash}`)\n            .digest('hex');\n        if (aHash.startsWith(BlockchainModel.PROOF_OF_WORK_CONSTRAINT)) {\n            this._proofOfWorkSubject.next(`Wohoo! ${this._proofOfWork} worked. I am creating a new block.`);\n            this._blockchain.addBlock(this._proofOfWork);\n        } else {\n            ++this._proofOfWork;\n        }\n    }\n\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Miner from './Miner';\nimport TransactionForm from './TransactionForm';\nimport Blockchain from './Blockchain';\nimport BlockchainModel from './model/blockchain-model';\nimport MinerModel from './model/miner-model';\n\nconst App: React.FC = () => {\n    \n    const [blockchain, setBlockchain] = useState(new BlockchainModel());\n    const [miner, setMiner] = useState(new MinerModel(blockchain));\n\n    useEffect(() => {\n        return () => miner.tearDown();\n    });\n    \n    return (\n        <div className=\"tile is-ancestor\">\n            <div className=\"tile is-vertical\">\n                <div className=\"tile is-parent\">\n                    <div className=\"tile is-child box\">\n                        <p>\n                            This is a simple blockchain simulator. It consists only of one miner that tries to find find blocks.\n                        </p>\n                    </div>\n                </div>\n                <div className=\"tile\">\n                    <div className=\"tile is-parent\">\n                        <div className=\"tile is-child box\">\n                            <TransactionForm blockchain={blockchain} />\n                        </div>\n                    </div>\n                    <div className=\"tile is-parent is-vertical\">\n                        <div className=\"tile is-child box\">\n                            <Miner miner={miner} />\n                        </div>\n                        <div className=\"tile is-child box\">\n                            <Blockchain blockchain={blockchain} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}